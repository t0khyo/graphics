import tkinter as tk

def bresenham_line(x_start, y_start, x_end, y_end):
    # List to store the points along the line
    points = []

    # Calculate the differences between the start and end coordinates
    dx = abs(x_end - x_start)
    dy = abs(y_end - y_start)

    # Determine the direction of movement (positive or negative) for each axis
    step_x = 1 if x_start < x_end else -1
    step_y = 1 if y_start < y_end else -1

    # Initialize the error term
    error = dx - dy

    # Iterate through the line
    while x_start != x_end or y_start != y_end:
        # Add the current point to the list
        points.append((x_start, y_start))

        # Calculate double the error
        error_twice = 2 * error

        # Check if the error is greater than negative dy
        if error_twice > -dy:
            error -= dy
            x_start += step_x

        # Check if the error is less than dx
        if error_twice < dx:
            error += dx
            y_start += step_y

    # Add the last point to the list
    points.append((x_end, y_end))

    # Return the list of points along the line
    return points

# Example usage:
start_point = (1, 1)
end_point = (8, 4)

line_points = bresenham_line(*start_point, *end_point)

# Print the points along the line
for point in line_points:
    print(point)

class App:
    def __init__(self, master):
        self.master = master
        self.canvas = tk.Canvas(master, width=300, height=300)
        self.canvas.pack()

        # Entry widgets for user input
        self.start_x_entry = tk.Entry(master, width=5)
        self.start_y_entry = tk.Entry(master, width=5)
        self.end_x_entry = tk.Entry(master, width=5)
        self.end_y_entry = tk.Entry(master, width=5)

        # Button to draw the line
        self.draw_button = tk.Button(master, text="Draw Line", command=self.draw_line)

        # Place widgets on the window
        tk.Label(master, text="Start X:").pack(side=tk.LEFT)
        self.start_x_entry.pack(side=tk.LEFT)
        tk.Label(master, text="Start Y:").pack(side=tk.LEFT)
        self.start_y_entry.pack(side=tk.LEFT)
        tk.Label(master, text="End X:").pack(side=tk.LEFT)
        self.end_x_entry.pack(side=tk.LEFT)
        tk.Label(master, text="End Y:").pack(side=tk.LEFT)
        self.end_y_entry.pack(side=tk.LEFT)
        self.draw_button.pack(side=tk.LEFT)

    def draw_line(self):
        # Get user input for coordinates
        x0 = int(self.start_x_entry.get())
        y0 = int(self.start_y_entry.get())
        x1 = int(self.end_x_entry.get())
        y1 = int(self.end_y_entry.get())

        # Get points using Bresenham's Line Algorithm
        line_points = bresenham_line(x0, y0, x1, y1)

        # Draw the line on the canvas
        self.draw_on_canvas(line_points)

    def draw_on_canvas(self, points):
        # Clear previous drawings
        self.canvas.delete("all")

        # Draw line on the canvas
        self.canvas.create_line(points, fill="black", width=2)

if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()





# def bresenham_line(x0, y0, x1, y1):
#     points = []

#     dx = abs(x1 - x0)
#     dy = abs(y1 - y0)
#     p = 2 * dy - dx

#     while x0 < x1 or y0 < y1:
#       if p > 0:
#          y0 += 1
#          p = 2 * (dy - dx)
#       elif p <= 0:
#          x0 += 1
#          p =  2 * dy
      
#       points.append((x0, y0))
      

#     return points


# line_points = bresenham_line(0, 0, 50, 100)


# print(line_points)

